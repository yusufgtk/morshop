// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using morshop.repository.Concrete;

#nullable disable

namespace morshop.repository.Migrations
{
    [DbContext(typeof(ShopContext))]
    partial class ShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("morshop.entity.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("morshop.entity.CardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("ProductId");

                    b.ToTable("CardItems");
                });

            modelBuilder.Entity("morshop.entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Telefon",
                            Url = "telefon"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tablet",
                            Url = "tablet"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bilgisayar",
                            Url = "bilgisayar"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Televizyon",
                            Url = "televizyon"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Konsol",
                            Url = "konsol"
                        });
                });

            modelBuilder.Entity("morshop.entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypes")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("morshop.entity.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("morshop.entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSales")
                        .HasColumnType("int");

                    b.Property<decimal>("PreviousPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CurrentPrice = 68899m,
                            Description = "Iphone 14 Pro Max 1 tb Hafıza",
                            ImageUrl = "iphone-14-pro-max.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Iphone 14 Pro Max",
                            NumberOfSales = 1230,
                            PreviousPrice = 70999m,
                            Url = "iphone-14-pro-max"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CurrentPrice = 59899m,
                            Description = "Iphone 14 1 tb Hafıza",
                            ImageUrl = "iphone-14.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Iphone 14",
                            NumberOfSales = 1453,
                            PreviousPrice = 61999m,
                            Url = "iphone-14"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CurrentPrice = 45999m,
                            Description = "Iphone 13 Pro Max 512 gb Hafıza",
                            ImageUrl = "iphone-13-pro-max.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Iphone 13 Pro Max",
                            NumberOfSales = 1100,
                            PreviousPrice = 48999m,
                            Url = "iphone-13-pro-max"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CurrentPrice = 35899m,
                            Description = "Iphone 12 512 gb Hafıza",
                            ImageUrl = "iphone-12.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Iphone 12",
                            NumberOfSales = 920,
                            PreviousPrice = 37999m,
                            Url = "iphone-12"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CurrentPrice = 35999m,
                            Description = "Samsun S20 Ultra 1 tb Hafıza",
                            ImageUrl = "samsung-s23-ultra.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Samsung S23 Ultra",
                            NumberOfSales = 963,
                            PreviousPrice = 37999m,
                            Url = "samsung-s23-ultra"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CurrentPrice = 30899m,
                            Description = "Ipad Air 5. Nesil 1 tb Hafıza",
                            ImageUrl = "ipad-air-5-nesil.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Ipad Air 5. Nesil",
                            NumberOfSales = 571,
                            PreviousPrice = 32999m,
                            Url = "ipad-air-5-nesil"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CurrentPrice = 30999m,
                            Description = "Samsung Tab S8 Ultra 1 tb Hafıza",
                            ImageUrl = "samsung-tab-s8-ultra.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Samsung Tab S8 Ultra",
                            NumberOfSales = 236,
                            PreviousPrice = 28999m,
                            Url = "samsung-tab-s8-ultra"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CurrentPrice = 70899m,
                            Description = "Macbook Pro 1 tb Hafıza",
                            ImageUrl = "macbook-pro.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Macbook Pro",
                            NumberOfSales = 1230,
                            PreviousPrice = 65999m,
                            Url = "macbook-pro"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CurrentPrice = 29899m,
                            Description = "Monster Abra A5 1 tb Hafıza",
                            ImageUrl = "monster-abra-a5.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Monster Abra A5",
                            NumberOfSales = 851,
                            PreviousPrice = 25999m,
                            Url = "monster-abra-a5"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CurrentPrice = 90899m,
                            Description = "Asus Rog 17.1 512 gb Hafıza Rtx4080 i7 13750h",
                            ImageUrl = "asus-rog-17.jpeg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Asus Rog 17",
                            NumberOfSales = 1230,
                            PreviousPrice = 81999m,
                            Url = "asus-rog-17"
                        });
                });

            modelBuilder.Entity("morshop.entity.CardItem", b =>
                {
                    b.HasOne("morshop.entity.Card", "Card")
                        .WithMany("CardItems")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("morshop.entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("morshop.entity.OrderItem", b =>
                {
                    b.HasOne("morshop.entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("morshop.entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("morshop.entity.Card", b =>
                {
                    b.Navigation("CardItems");
                });

            modelBuilder.Entity("morshop.entity.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
